// <auto-generated />
using System;
using LetWeCook.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LetWeCook.Data.Migrations
{
    [DbContext(typeof(LetWeCookDbContext))]
    [Migration("20240922182707_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LetWeCook.Data.Entities.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("ActivityType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("activity_type");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<Guid>("ReferenceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("reference_id");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("activity", (string)null);
                });

            modelBuilder.Entity("LetWeCook.Data.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("balance");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit")
                        .HasColumnName("is_removed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("application_user", (string)null);
                });

            modelBuilder.Entity("LetWeCook.Data.Entities.CollectionRecipe", b =>
                {
                    b.Property<Guid>("DishCollectionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("collection_id");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("recipe_id");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_added");

                    b.HasKey("DishCollectionId", "RecipeId");

                    b.HasIndex("RecipeId");

                    b.ToTable("collection_recipe", (string)null);
                });

            modelBuilder.Entity("LetWeCook.Data.Entities.DietaryPreference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.ToTable("dietary_preference", (string)null);
                });

            modelBuilder.Entity("LetWeCook.Data.Entities.DishCollection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("dish_collection", (string)null);
                });

            modelBuilder.Entity("LetWeCook.Data.Entities.Feed", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("activity_id");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_added");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("feed", (string)null);
                });

            modelBuilder.Entity("LetWeCook.Data.Entities.Ingredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("ingredient", (string)null);
                });

            modelBuilder.Entity("LetWeCook.Data.Entities.MealPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("date");

                    b.Property<string>("MealType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("meal_type");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("meal_plan", (string)null);
                });

            modelBuilder.Entity("LetWeCook.Data.Entities.MealPlanRecipe", b =>
                {
                    b.Property<Guid>("MealId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("meal_id");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("recipe_id");

                    b.Property<Guid>("MealPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Servings")
                        .HasColumnType("int")
                        .HasColumnName("servings");

                    b.HasKey("MealId", "RecipeId");

                    b.HasIndex("MealPlanId");

                    b.HasIndex("RecipeId");

                    b.ToTable("meal_plan_recipe", (string)null);
                });

            modelBuilder.Entity("LetWeCook.Data.Entities.MediaUrl", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Alt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("alt");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.ToTable("media_url", (string)null);
                });

            modelBuilder.Entity("LetWeCook.Data.Entities.Recipe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("created_by");

                    b.Property<decimal>("CookTimeInMinutes")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("cook_time");

                    b.Property<string>("Cuisine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("cuisine");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("difficulty");

                    b.Property<int>("Serving")
                        .HasColumnType("int")
                        .HasColumnName("serving");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("recipe", (string)null);
                });

            modelBuilder.Entity("LetWeCook.Data.Entities.RecipeIngredient", b =>
                {
                    b.Property<Guid>("IngredientId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ingredient_id");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("recipe_id");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("quantity");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("unit");

                    b.HasKey("IngredientId", "RecipeId");

                    b.HasIndex("RecipeId");

                    b.ToTable("recipe_ingredient", (string)null);
                });

            modelBuilder.Entity("LetWeCook.Data.Entities.RecipeStep", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Instruction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("instruction");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("recipe_id");

                    b.Property<int>("StepNumber")
                        .HasColumnType("int")
                        .HasColumnName("step_number");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.ToTable("recipe_step", (string)null);
                });

            modelBuilder.Entity("LetWeCook.Data.Entities.RecipeStepMedia", b =>
                {
                    b.Property<Guid>("RecipeStepId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("recipe_step_id");

                    b.Property<Guid>("MediaUrlId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("media_url_id");

                    b.HasKey("RecipeStepId", "MediaUrlId");

                    b.HasIndex("MediaUrlId");

                    b.ToTable("recipe_step_media", (string)null);
                });

            modelBuilder.Entity("LetWeCook.Data.Entities.ShoppingList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_completed");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("shopping_list", (string)null);
                });

            modelBuilder.Entity("LetWeCook.Data.Entities.ShoppingListItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("IngredientId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ingredient_id");

                    b.Property<bool>("IsPurchased")
                        .HasColumnType("bit")
                        .HasColumnName("is_purchased");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("quantity");

                    b.Property<Guid>("ShoppingListId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("list_id");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("unit");

                    b.HasKey("Id");

                    b.HasIndex("IngredientId");

                    b.HasIndex("ShoppingListId");

                    b.ToTable("shopping_list_item", (string)null);
                });

            modelBuilder.Entity("LetWeCook.Data.Entities.UserDietaryPreference", b =>
                {
                    b.Property<Guid>("DietaryPreferenceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("preference_id");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_profile_id");

                    b.HasKey("DietaryPreferenceId", "UserProfileId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("user_dietary_preference", (string)null);
                });

            modelBuilder.Entity("LetWeCook.Data.Entities.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address");

                    b.Property<int>("Age")
                        .HasColumnType("int")
                        .HasColumnName("age");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("first_name");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("gender");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("last_name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("phone_number");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("user_profile", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("IdentityUserRole<Guid>");
                });

            modelBuilder.Entity("LetWeCook.Data.Entities.Activity", b =>
                {
                    b.HasOne("LetWeCook.Data.Entities.ApplicationUser", "User")
                        .WithMany("Activities")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LetWeCook.Data.Entities.CollectionRecipe", b =>
                {
                    b.HasOne("LetWeCook.Data.Entities.DishCollection", "Collection")
                        .WithMany("CollectionRecipes")
                        .HasForeignKey("DishCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LetWeCook.Data.Entities.Recipe", "Recipe")
                        .WithMany("CollectionRecipes")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collection");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("LetWeCook.Data.Entities.DishCollection", b =>
                {
                    b.HasOne("LetWeCook.Data.Entities.ApplicationUser", "User")
                        .WithMany("DishCollection")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LetWeCook.Data.Entities.Feed", b =>
                {
                    b.HasOne("LetWeCook.Data.Entities.Activity", "Activity")
                        .WithMany("Feeds")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LetWeCook.Data.Entities.ApplicationUser", "User")
                        .WithMany("Feeds")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LetWeCook.Data.Entities.MealPlan", b =>
                {
                    b.HasOne("LetWeCook.Data.Entities.ApplicationUser", "User")
                        .WithMany("MealPlans")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LetWeCook.Data.Entities.MealPlanRecipe", b =>
                {
                    b.HasOne("LetWeCook.Data.Entities.MealPlan", "MealPlan")
                        .WithMany("MealPlanRecipes")
                        .HasForeignKey("MealPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LetWeCook.Data.Entities.Recipe", "Recipe")
                        .WithMany("MealPlanRecipes")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MealPlan");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("LetWeCook.Data.Entities.Recipe", b =>
                {
                    b.HasOne("LetWeCook.Data.Entities.ApplicationUser", "CreatedBy")
                        .WithMany("Recipes")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("LetWeCook.Data.Entities.RecipeIngredient", b =>
                {
                    b.HasOne("LetWeCook.Data.Entities.Ingredient", "Ingredient")
                        .WithMany("RecipeIngredients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LetWeCook.Data.Entities.Recipe", "Recipe")
                        .WithMany("RecipeIngredients")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("LetWeCook.Data.Entities.RecipeStep", b =>
                {
                    b.HasOne("LetWeCook.Data.Entities.Recipe", "Recipe")
                        .WithMany("RecipeSteps")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("LetWeCook.Data.Entities.RecipeStepMedia", b =>
                {
                    b.HasOne("LetWeCook.Data.Entities.MediaUrl", "MediaUrl")
                        .WithMany("RecipeStepsMedia")
                        .HasForeignKey("MediaUrlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LetWeCook.Data.Entities.RecipeStep", "RecipeStep")
                        .WithMany("RecipeStepMedias")
                        .HasForeignKey("RecipeStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaUrl");

                    b.Navigation("RecipeStep");
                });

            modelBuilder.Entity("LetWeCook.Data.Entities.ShoppingList", b =>
                {
                    b.HasOne("LetWeCook.Data.Entities.ApplicationUser", "User")
                        .WithMany("ShoppingLists")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LetWeCook.Data.Entities.ShoppingListItem", b =>
                {
                    b.HasOne("LetWeCook.Data.Entities.Ingredient", "Ingredient")
                        .WithMany("ShoppingListItems")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LetWeCook.Data.Entities.ShoppingList", "ShoppingList")
                        .WithMany("ShoppingListItems")
                        .HasForeignKey("ShoppingListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("ShoppingList");
                });

            modelBuilder.Entity("LetWeCook.Data.Entities.UserDietaryPreference", b =>
                {
                    b.HasOne("LetWeCook.Data.Entities.DietaryPreference", "DietaryPreference")
                        .WithMany("UserDietaryPreferences")
                        .HasForeignKey("DietaryPreferenceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LetWeCook.Data.Entities.UserProfile", "UserProfile")
                        .WithMany("UserDietaryPreferences")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DietaryPreference");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("LetWeCook.Data.Entities.UserProfile", b =>
                {
                    b.HasOne("LetWeCook.Data.Entities.ApplicationUser", "User")
                        .WithOne("UserProfile")
                        .HasForeignKey("LetWeCook.Data.Entities.UserProfile", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LetWeCook.Data.Entities.Activity", b =>
                {
                    b.Navigation("Feeds");
                });

            modelBuilder.Entity("LetWeCook.Data.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("DishCollection");

                    b.Navigation("Feeds");

                    b.Navigation("MealPlans");

                    b.Navigation("Recipes");

                    b.Navigation("ShoppingLists");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("LetWeCook.Data.Entities.DietaryPreference", b =>
                {
                    b.Navigation("UserDietaryPreferences");
                });

            modelBuilder.Entity("LetWeCook.Data.Entities.DishCollection", b =>
                {
                    b.Navigation("CollectionRecipes");
                });

            modelBuilder.Entity("LetWeCook.Data.Entities.Ingredient", b =>
                {
                    b.Navigation("RecipeIngredients");

                    b.Navigation("ShoppingListItems");
                });

            modelBuilder.Entity("LetWeCook.Data.Entities.MealPlan", b =>
                {
                    b.Navigation("MealPlanRecipes");
                });

            modelBuilder.Entity("LetWeCook.Data.Entities.MediaUrl", b =>
                {
                    b.Navigation("RecipeStepsMedia");
                });

            modelBuilder.Entity("LetWeCook.Data.Entities.Recipe", b =>
                {
                    b.Navigation("CollectionRecipes");

                    b.Navigation("MealPlanRecipes");

                    b.Navigation("RecipeIngredients");

                    b.Navigation("RecipeSteps");
                });

            modelBuilder.Entity("LetWeCook.Data.Entities.RecipeStep", b =>
                {
                    b.Navigation("RecipeStepMedias");
                });

            modelBuilder.Entity("LetWeCook.Data.Entities.ShoppingList", b =>
                {
                    b.Navigation("ShoppingListItems");
                });

            modelBuilder.Entity("LetWeCook.Data.Entities.UserProfile", b =>
                {
                    b.Navigation("UserDietaryPreferences");
                });
#pragma warning restore 612, 618
        }
    }
}
